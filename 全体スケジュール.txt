### AGI受注最適化システム構築: 全体手順のToDoリスト

ユーザーのビジョンに基づき、受託開発事業者（個人/スタートアップ/中小企業）向けAGIシステムを構築する手順を定義。焦点: 顧客獲得の課題解決（案件選定の曖昧さ、営業非効率、ミスマッチ回避）。機能として、顧客リスト生成（GitHub/HP巡回ベース）、自社LP作成、業界事例/デモアプリ自動生成を組み込み、最短受注フロー（トリガー→分析→提案→デプロイ準備）をDAGで実現。

#### 全体アプローチの前提
- **構造**: Orchestrator（階層: 本部長/部長/社員レイヤー、3-5階層推奨）。Manifest YAML（5-10種類: 営業/分析/資料/デモ/レビューなど）。Agent（20-50個: タスク特化、共通化で重複回避）。
- **開発原則**: 宣言的（YAML駆動）。最小MVP（ハッカソン後スケール）。ツール: Supabase/Codex/V0/Cloud Run。
- **手順カテゴリ**: 1-10で大まかなフェーズ分け。各カテゴリを**エピック（大目標）** → **ストーリー（中目標、ユーザー視点の価値）** → **タスク（最小実行単位、細分化限界）**でToDoリスト化。タスクは「誰が（役割）」「いつ（目安）」「出力物」で具体化。総タスク数: 約150（MVP焦点）。

#### 1. 要件定義/ビジョン設定
**目的**: 課題背景を明確化し、MVPスコープを固める。受注最適化のKPI（リード獲得率/受注時間短縮）を定義。

| エピック | ストーリー | タスク |
|----------|------------|--------|
| **課題/要件収集** | 事業者インタビューで痛み点抽出 | - [PM] 1日目: ユーザー（エンジニア/事業者）3名インタビュー（30分/人）。出力: 課題リスト（Google Doc）。<br>- [PM] 1日目: 課題分類（案件選定/営業/ミスマッチ）。出力: ペルソナシート（Notion）。 |
| | KPI/成功基準定義 | - [PM] 1日目: KPI設定（リード生成: 週10件、受注サイクル: 2週短縮）。出力: KPIテンプレート（YAML）。<br>- [Dev] 1日目: 機能マッピング（顧客リスト→LP作成→デモ）。出力: 機能要件Doc（Markdown）。 |
| **MVPスコープ決定** | コアフロー優先順位付け | - [All] 1日目: モブレビュー（Zoom 1h）。出力: MVPバックログ（Trello/Jira）。<br>- [PM] 1日目: 優先度付け（MoSCoW法）。出力: スコープYAML（必須: 営業DAG）。 |

#### 2. アーキテクチャ設計
**目的**: Orchestrator/Manifest/Agentの土台設計。階層/種類を決定（Orchestrator: 3階層、Manifest: 7種、Agent: 30個）。

| エピック | ストーリー | タスク |
|----------|------------|--------|
| **コア構造定義** | Orchestrator階層設計 | - [Arch] 2日目: レイヤー図作成（本部長: 目標設定、部長: ルーティング、社員: 実行）。出力: Draw.io図。<br>- [Arch] 2日目: DAGフロー定義（トリガー→分析→提案）。出力: 認知DAG YAML雛形。 |
| | Manifest YAMLスキーマ策定 | - [Arch] 2日目: 7種YAML定義（営業/分析/LP/事例/デモ/レビュー/共通出力）。出力: JSON Schema。<br>- [Dev] 2日目: Lintルール追加（SemVer/ポリシー検証）。出力: 検証スクリプト（Python）。 |
| **Agentカタログ作成** | Agent種類/共通化設計 | - [Dev] 2日目: 30 Agentリスト（例: クローラAgent x5、資料Agent x10）。出力: Agentカタログ（CSV）。<br>- [Arch] 2日目: 共通レイヤー定義（PDF出力/リファクタリング）。出力: 共通Manifestテンプレート。 |
| **データ/ツール統合設計** | Supabase/DB設計 | - [Dev] 2日目: テーブル定義（problems/solutions/manifests）。出力: SQL DDL。<br>- [Dev] 2日目: コネクタ設計（Gmail/Calendar/GitHub API）。出力: APIスペック（OpenAPI YAML）。 |

#### 3. コアコンポーネント開発
**目的**: Orchestrator/Manifest/Agentの実装。YAML駆動で最小動作確認。

| エピック | ストーリー | タスク |
|----------|------------|--------|
| **Orchestrator実装** | 基本ルーティング構築 | - [Dev] 3-4日目: YAML読み込み/インテント分析（LLMプロンプト）。出力: Node.jsモジュール。<br>- [Dev] 4日目: 階層ルーティング（本部長→部長委任）。出力: テストケース（Jest）。<br>- [Dev] 4日目: DAG実行エンジン（依存/並列）。出力: プロトタイプコード（Git commit）。 |
| | 目標設定/レビュー統合 | - [Dev] 5日目: 目標生成（ユーザーインプット→KPIマップ）。出力: レビュー関数。<br>- [Dev] 5日目: フィードバックループ（RL簡易）。出力: 評価メトリクス計算スクリプト。 |
| **Manifest YAML開発** | テンプレート/検証ツール作成 | - [Dev] 3日目: 7種YAMLサンプル生成（営業Manifest例）。出力: Gitリポジトリ。<br>- [Dev] 3日目: Studio UI雛形（V0/Codex）。出力: Lint/ドライラン機能。<br>- [Dev] 4日目: 署名/バージョン管理（SemVer）。出力: 保存APIエンドポイント。 |
| **Agent開発** | コアAgent実装（10個優先） | - [Dev] 5-6日目: クローラAgent（GitHub巡回）。出力: ツール統合コード。<br>- [Dev] 6日目: 資料Agent（LP/事例生成）。出力: 共通出力パーサー。<br>- [Dev] 6日目: デモAgent（アプリモック作成）。出力: Vercelデプロイスクリプト。<br>- [Dev] 7日目: 残20 Agentプラグイン化。出力: Agent登録API。 |

#### 4. ツール/統合開発
**目的**: 外部API/データフローの接続。顧客リスト生成/LP作成を動作化。

| エピック | ストーリー | タスク |
|----------|------------|--------|
| **APIコネクタ構築** | 外部ツール統合 | - [Dev] 7日目: GitHub/Gmail APIラッパー。出力: SDKモジュール。<br>- [Dev] 7日目: Supabase RAG（記憶/知識ベース）。出力: ベクタDBクエリ関数。<br>- [Dev] 8日目: Calendar/CRM同期（HubSpot）。出力: Webhookハンドラー。 |
| **データフロー実装** | 顧客リスト/事例生成 | - [Dev] 8日目: リスト生成Agent（スコアリング）。出力: normalized_leads出力。<br>- [Dev] 8日目: LP/デモ自動化（テンプレート注入）。出力: 出力バリデーション。 |
| **ガバナンス統合** | 安全/承認レイヤー | - [Dev] 9日目: PIIマスキング/Kill-Switch。出力: ポリシーチェックミドルウェア。<br>- [Dev] 9日目: 承認ゲートAPI（initial_contact）。出力: 承認フローコード。 |

#### 5. UI/UX開発
**目的**: 管理画面構築。状態把握/ダウンロードを容易に（UI必要論採用）。

| エピック | ストーリー | タスク |
|----------|------------|--------|
| **ダッシュ/キャンバス実装** | ホーム/Orchestrator UI | - [UI] 9-10日目: ダッシュボード（KPI/ログ）。出力: Next.jsページ。<br>- [UI] 10日目: DAGキャンバス（React Flow）。出力: ノード編集機能。<br>- [UI] 10日目: Manifest Studio（エディタ/Lint）。出力: YAML同期。 |
| **承認/出力UI** | ガバナンス/ダウンロード | - [UI] 11日目: 承認センター（キュー/プレビュー）。出力: 承認ボタン/ログ。<br>- [UI] 11日目: 資料ダウンロード（LP/デモ）。出力: PDF/アプリリンク生成。 |
| **アクセシビリティ** | 多言語/レスポンシブ | - [UI] 12日目: JP/EN切替/時区対応。出力: i18n設定。<br>- [UI] 12日目: WCAG準拠テスト。出力: アクセシビリティレポート。 |

#### 6. テスト/評価
**目的**: MVP検証。受注フローE2Eテスト。

| エピック | ストーリー | タスク |
|----------|------------|--------|
| **単体/統合テスト** | コンポーネント検証 | - [QA] 12-13日目: Unitテスト（Orchestratorルーティング）。出力: 80%カバレッジ。<br>- [QA] 13日目: E2Eテスト（トリガー→デモ生成）。出力: Cypressスクリプト。<br>- [QA] 13日目: 安全テスト（PII/脱獄）。出力: 評価レポート。 |
| **ユーザー評価** | 事業者フィードバック | - [QA] 14日目: モックテスト（3ユーザー）。出力: フィードバックログ。<br>- [QA] 14日目: KPI測定（リード生成精度）。出力: ベンチマークYAML。 |
| **回帰/パフォーマンス** | SLOチェック | - [QA] 15日目: レイテンシ/コストテスト。出力: ダッシュメトリクス。<br>- [QA] 15日目: RLループ検証。出力: 改善diffログ。 |

#### 7. デプロイ/運用
**目的**: Cloud Run/Sandbox配備。継続運用基盤。

| エピック | ストーリー | タスク |
|----------|------------|--------|
| **IaC/デプロイ** | 環境構築 | - [DevOps] 15-16日目: Terraform/Helmスクリプト。出力: IaCリポジトリ。<br>- [DevOps] 16日目: Secrets/KMS設定。出力: 環境差分（Staging/Prod）。<br>- [DevOps] 16日目: カナリアデプロイ。出力: リリースノート。 |
| **監視/バックアップ** | 可観測性実装 | - [DevOps] 17日目: OpenTelemetry/Logging。出力: ダッシュボード。<br>- [DevOps] 17日目: BCP/DR演習。出力: RTO/RPOドキュメント。 |
| **スケール準備** | コスト/セキュリティ | - [DevOps] 18日目: SLO/予算管理。出力: アラート定義。<br>- [DevOps] 18日目: SBOM/ペンテスト。出力: セキュリティレポート。 |

#### 8. ドキュメント/トレーニング
**目的**: 運用/オンボーディング資料作成。

| エピック | ストーリー | タスク |
|----------|------------|--------|
| **ドキュメント作成** | 設計/運用ガイド | - [PM] 18-19日目: アーキテクチャDoc。出力: README.md。<br>- [PM] 19日目: ユーザーガイド（受注フロー）。出力: 動画/ハンズオン（Notion）。 |
| **トレーニング** | オンボーディング | - [PM] 19日目: チェックリスト作成。出力: UATスクリプト。<br>- [PM] 20日目: チームトレーニング（1hセッション）。出力: フィードバックシート。 |
| **ケーススタディ** | ROI/事例 | - [PM] 20日目: PoC事例（模擬受注）。出力: 1-pagerテンプレート。 |

#### 9. イテレーション/改善
**目的**: フィードバックループで自己改善。ボンギさんレビュー反映。

| エピック | ストーリー | タスク |
|----------|------------|--------|
| **レビュー/差分** | 内部イテレーション | - [All] 20-21日目: ボンギさんMTG（Discord）。出力: 改善バックログ。<br>- [Dev] 21日目: policy_diff適用（YAML更新）。出力: バージョンアップ。 |
| **RL/学習統合** | 自己改善実装 | - [Dev] 21日目: 報酬設計（受注率ベース）。出力: HF/RLスクリプト。<br>- [Dev] 22日目: オフライン評価。出力: チューニング記録。 |
| **A/Bテスト** | 機能最適化 | - [QA] 22日目: LP生成A/B（Codex vs V0）。出力: 勝者ロールアウト。 |

#### 10. リリース/スケール
**目的**: GitHubデプロイ/営業自動化開始。外部展開。

| エピック | ストーリー | タスク |
|----------|------------|--------|
| **リリース準備** | MVP公開 | - [DevOps] 22-23日目: AB/カナリアリリース。出力: ステータスページ。<br>- [PM] 23日目: マーケ資料（提案テンプレ）。出力: デモ台本。 |
| **運用開始** | 自社GitHubデプロイ | - [DevOps] 23日目: AGIインストール（自動営業）。出力: 初リード生成ログ。<br>- [PM] 24日目: 月次レポートテンプレート。出力: SLAモニタリング。 |
| **スケール計画** | 拡張ロードマップ | - [All] 24日目: フェーズ2定義（Instagram統合）。出力: ロードマップDoc。<br>- [PM] 25日目: パッケージ化（API/SDK）。出力: 価格モデル（仮）。 |

#### 実行Tips
- **タイムライン**: 総25日（ハッカソン後継続）。週次レビューで調整。
- **ツール活用**: Codexでコード生成、V0でUIプロト、SupabaseでDB。
- **リスク**: 細分化過多→並列化（Dev 3人推奨）。ボンギさんフィードバックでManifest種類調整。
- **測定**: 各エピック終了時KPIチェック（進捗80%以上）。

このToDoはMVP焦点。詳細は設計書共有でイテレート。