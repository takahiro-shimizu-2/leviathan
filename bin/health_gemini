#!/usr/bin/env python3
import os
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

# Load .env if present
try:
    from dotenv import load_dotenv  # type: ignore
    env_path = os.path.join(os.path.dirname(__file__), '..', '.env')
    if os.path.exists(env_path):
        load_dotenv(env_path)
except Exception:
    pass

def main() -> int:
    key = os.environ.get("GOOGLE_API_KEY")
    if not key:
        print("GOOGLE_API_KEY not set", file=sys.stderr)
        return 2
    try:
        from langchain_google_genai import ChatGoogleGenerativeAI  # type: ignore
    except Exception as e:
        print(f"langchain-google-genai not available: {e}", file=sys.stderr)
        return 3
    # Try instantiation with default model from manifest if available
    model = "gemini-2.5-pro"
    try:
        import yaml  # type: ignore
        root = os.path.dirname(os.path.dirname(__file__))
        mani_path = os.path.join(root, "registry", "manifest_langstack.yaml")
        if os.path.exists(mani_path):
            with open(mani_path, "r", encoding="utf-8") as f:
                mani = yaml.safe_load(f) or {}
            defaults = (mani.get("runtime", {}) or {}).get("llm_defaults", {}) or {}
            model = defaults.get("model") or model
    except Exception:
        pass

    try:
        _ = ChatGoogleGenerativeAI(model=model, temperature=0.1)
    except Exception as e:
        print(f"Failed to initialize ChatGoogleGenerativeAI: {e}", file=sys.stderr)
        return 4
    print(f"Gemini OK (model={model})")
    return 0

if __name__ == "__main__":
    raise SystemExit(main())
